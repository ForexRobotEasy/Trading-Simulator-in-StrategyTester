mql5
//+------------------------------------------------------------------+
//|                     Trading Simulator in StrategyTester           |
//|                     Developer's Site: forexroboteasy.com          |
//|                     Development: Forex Robot Easy Team            |
//+------------------------------------------------------------------+

// Define inputs
input double StopLoss = 50.0; // Stop loss in points
input double TakeProfit = 100.0; // Take profit in points
input double OrderVolume = 0.1; // Order volume in lots

//+------------------------------------------------------------------+
//|                      Expert initialization function              |
//+------------------------------------------------------------------+
int OnInit()
{
    // Set necessary parameters for Strategy Tester
    if (!IsTesting())
    {
        Print('This code can only be run in the Strategy Tester.');
        return INIT_FAILED;
    }
    
    // Initialize necessary variables and objects
    // ...
    
    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//|                     Expert start function                         |
//+------------------------------------------------------------------+
void OnTick()
{
    // Check if Strategy Tester is running
    if (!IsTesting())
    {
        Print('This code can only be run in the Strategy Tester.');
        return;
    }
    
    // Check for manual trade management
    if (IsTradeAllowed())
    {
        // Get current price
        double currentPrice = MarketInfo(Symbol(), MODE_LAST);
        
        // Check for buy signal
        if (BuySignal())
        {
            // Calculate entry price
            double entryPrice = currentPrice - StopLoss * Point();
            
            // Create buy order
            int ticket = OrderSend(Symbol(), OP_BUY, OrderVolume, entryPrice, 0, 0, 0, 'Buy Order', 0, 0, Green);
            
            // Check for successful order creation
            if (ticket > 0)
            {
                // Set stop loss and take profit levels
                OrderSelect(ticket, SELECT_BY_TICKET);
                OrderModify(ticket, OrderOpenPrice(), entryPrice + TakeProfit * Point(), entryPrice - StopLoss * Point(), 0, Green);
            }
        }
        
        // Check for sell signal
        if (SellSignal())
        {
            // Calculate entry price
            double entryPrice = currentPrice + StopLoss * Point();
            
            // Create sell order
            int ticket = OrderSend(Symbol(), OP_SELL, OrderVolume, entryPrice, 0, 0, 0, 'Sell Order', 0, 0, Red);
            
            // Check for successful order creation
            if (ticket > 0)
            {
                // Set stop loss and take profit levels
                OrderSelect(ticket, SELECT_BY_TICKET);
                OrderModify(ticket, OrderOpenPrice(), entryPrice - TakeProfit * Point(), entryPrice + StopLoss * Point(), 0, Red);
            }
        }
    }
    
    // Check for manual position and order management
    if (IsTradeAllowed())
    {
        // Check for open positions
        for (int i = 0; i < OrdersTotal(); i++)
        {
            if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
            {
                // Check for manual position closure
                if (ClosePositionSignal())
                {
                    OrderClose(OrderTicket(), OrderLots(), OrderClosePrice(), 0, Red);
                }
            }
        }
        
        // Check for pending orders
        for (int i = 0; i < OrdersTotal(); i++)
        {
            if (OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
            {
                // Check for manual order cancellation
                if (CancelOrderSignal())
                {
                    OrderDelete(OrderTicket());
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//|                     Check if trade is allowed                      |
//+------------------------------------------------------------------+
bool IsTradeAllowed()
{
    // Check for trading days and hours
    // ...
    
    return true;
}

//+------------------------------------------------------------------+
//|                     Check for buy signal                           |
//+------------------------------------------------------------------+
bool BuySignal()
{
    // Implement buy signal logic
    // ...
    
    return true;
}

//+------------------------------------------------------------------+
//|                     Check for sell signal                          |
//+------------------------------------------------------------------+
bool SellSignal()
{
    // Implement sell signal logic
    // ...
    
    return true;
}

//+------------------------------------------------------------------+
//|              Check for close position signal                       |
//+------------------------------------------------------------------+
bool ClosePositionSignal()
{
    // Implement close position signal logic
    // ...
    
    return false;
}

//+------------------------------------------------------------------+
//|                Check for cancel order signal                       |
//+------------------------------------------------------------------+
bool CancelOrderSignal()
{
    // Implement cancel order signal logic
    // ...
    
    return false;
}
